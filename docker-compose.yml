services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-book
    environment:
    - NODE_ENV=development
    - VITE_COVERAGE=true
    ports:
      - '80:80'
    depends_on:
      - backend
    networks:
      - book-net

  backend:
    build:
      context: ./backend
    container_name: backend-book
    depends_on:
      database:
        condition: service_healthy
    environment:
      - PGURI=${PGURI}
    ports:
      - '3000:3000'
    networks:
      - book-net

  database:
    image: postgres:latest
    container_name: databaseBook
    environment:
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: 'pg_isready -U ${DB_USER}'
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - book-net

  cypress:
    # the Docker image to use from https://github.com/cypress-io/cypress-docker-images
    image: "cypress/included:12.0.0"
    container_name: cypresstestsBook
    depends_on:
      - frontend
    working_dir: /frontend
    environment:
      - CYPRESS_baseUrl=http://frontend-book
    volumes:
      - ./frontend:/frontend
      - ./coverage:/coverage
      - ./frontend/.nyc_output:/frontend/.nyc_output
      - ./coverage:/coverage
      - .:/app
    networks:
      - book-net

networks:
  book-net:
    driver: bridge

#https://www.cypress.io/blog/run-cypress-with-a-single-docker-command
#docker compose up --exit-code-from cypress
#docker compose run --rm cypress
